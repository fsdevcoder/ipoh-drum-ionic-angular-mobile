/**
 * Ipoh Drum Laravel API
 * This is a swagger-generated API documentation for the project Ipoh Drum. (Only supports OpenAPI Annotations for now.)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: henry_lcz97@hotmail.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';


import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class VoucherControllerServiceService {

    protected basePath = 'http://172.104.45.205';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }



    /**
     * Creates a voucher.
     * @param store_id Voucher belongs to which Store
     * @param name Voucher Name
     * @param unlimited Is This Voucher Unlimited?
     * @param discbyprice Is This Voucher Discount By Price?
     * @param desc Voucher Description
     * @param qty The limited quantity of voucher
     * @param disc Discount price
     * @param discpctg Discount percentage
     * @param minpurchase Minimum Purchase Price To Apply Voucher
     * @param minqty Minimum Purchase Qty To Apply Voucher
     * @param minvariety Minimum Item Variety To Apply Voucher
     * @param startdate Voucher Start Date
     * @param enddate Voucher End Date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createVoucher(store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createVoucher(store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createVoucher(store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createVoucher(store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (store_id === null || store_id === undefined) {
            throw new Error('Required parameter store_id was null or undefined when calling createVoucher.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling createVoucher.');
        }
        if (unlimited === null || unlimited === undefined) {
            throw new Error('Required parameter unlimited was null or undefined when calling createVoucher.');
        }
        if (discbyprice === null || discbyprice === undefined) {
            throw new Error('Required parameter discbyprice was null or undefined when calling createVoucher.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (store_id !== undefined && store_id !== null) {
            queryParameters = queryParameters.set('store_id', <any>store_id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', <any>desc);
        }
        if (unlimited !== undefined && unlimited !== null) {
            queryParameters = queryParameters.set('unlimited', <any>unlimited);
        }
        if (qty !== undefined && qty !== null) {
            queryParameters = queryParameters.set('qty', <any>qty);
        }
        if (discbyprice !== undefined && discbyprice !== null) {
            queryParameters = queryParameters.set('discbyprice', <any>discbyprice);
        }
        if (disc !== undefined && disc !== null) {
            queryParameters = queryParameters.set('disc', <any>disc);
        }
        if (discpctg !== undefined && discpctg !== null) {
            queryParameters = queryParameters.set('discpctg', <any>discpctg);
        }
        if (minpurchase !== undefined && minpurchase !== null) {
            queryParameters = queryParameters.set('minpurchase', <any>minpurchase);
        }
        if (minqty !== undefined && minqty !== null) {
            queryParameters = queryParameters.set('minqty', <any>minqty);
        }
        if (minvariety !== undefined && minvariety !== null) {
            queryParameters = queryParameters.set('minvariety', <any>minvariety);
        }
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.post<any>(`${this.configuration.basePath}/api/voucher`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Set voucher\&#39;s \&#39;status\&#39; to 0.
     * @param uid Voucher ID, NOT \&#39;ID\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteVoucherByUid(uid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public deleteVoucherByUid(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public deleteVoucherByUid(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public deleteVoucherByUid(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling deleteVoucherByUid.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.delete<any>(`${this.configuration.basePath}/api/voucher/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Filter list of vouchers
     * Returns list of filtered vouchers
     * @param page_number Page number
     * @param page_size Page size
     * @param keyword Keyword for filter
     * @param fromdate From Date for filter
     * @param todate To string for filter
     * @param status status for filter
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public filterVoucherList(page_number?: number, page_size?: number, keyword?: string, fromdate?: string, todate?: string, status?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public filterVoucherList(page_number?: number, page_size?: number, keyword?: string, fromdate?: string, todate?: string, status?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public filterVoucherList(page_number?: number, page_size?: number, keyword?: string, fromdate?: string, todate?: string, status?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public filterVoucherList(page_number?: number, page_size?: number, keyword?: string, fromdate?: string, todate?: string, status?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page_number !== undefined && page_number !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>page_number);
        }
        if (page_size !== undefined && page_size !== null) {
            queryParameters = queryParameters.set('pageSize', <any>page_size);
        }
        if (keyword !== undefined && keyword !== null) {
            queryParameters = queryParameters.set('keyword', <any>keyword);
        }
        if (fromdate !== undefined && fromdate !== null) {
            queryParameters = queryParameters.set('fromdate', <any>fromdate);
        }
        if (todate !== undefined && todate !== null) {
            queryParameters = queryParameters.set('todate', <any>todate);
        }
        if (status !== undefined && status !== null) {
            queryParameters = queryParameters.set('status', <any>status);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/api/filter/voucher`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Retrieves voucher by Uid.
     * @param uid Voucher_ID, NOT \&#39;ID\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVoucherByUid(uid: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getVoucherByUid(uid: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getVoucherByUid(uid: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getVoucherByUid(uid: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling getVoucherByUid.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/api/voucher/${encodeURIComponent(String(uid))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get list of vouchers
     * Returns list of vouchers
     * @param page_number Page number.
     * @param page_size Page size.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getVoucherList(page_number?: number, page_size?: number, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getVoucherList(page_number?: number, page_size?: number, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getVoucherList(page_number?: number, page_size?: number, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getVoucherList(page_number?: number, page_size?: number, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (page_number !== undefined && page_number !== null) {
            queryParameters = queryParameters.set('pageNumber', <any>page_number);
        }
        if (page_size !== undefined && page_size !== null) {
            queryParameters = queryParameters.set('pageSize', <any>page_size);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.get<any>(`${this.configuration.basePath}/api/voucher`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update voucher by Uid.
     * @param uid Voucher_ID, NOT \&#39;ID\&#39;.
     * @param store_id Voucher belongs to which Store
     * @param name Voucher Name
     * @param unlimited Is This Voucher Unlimited?
     * @param discbyprice Is This Voucher Discount By Price?
     * @param desc Voucher Description
     * @param qty The limited quantity of voucher
     * @param disc Discount price
     * @param discpctg Discount percentage
     * @param minpurchase Minimum Purchase Price To Apply Voucher
     * @param minqty Minimum Purchase Qty To Apply Voucher
     * @param minvariety Minimum Item Variety To Apply Voucher
     * @param startdate Voucher Start Date
     * @param enddate Voucher End Date
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public updateVoucherByUid(uid: string, store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public updateVoucherByUid(uid: string, store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public updateVoucherByUid(uid: string, store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public updateVoucherByUid(uid: string, store_id: number, name: string, unlimited: number, discbyprice: number, desc?: string, qty?: number, disc?: number, discpctg?: number, minpurchase?: number, minqty?: number, minvariety?: number, startdate?: string, enddate?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {
        if (uid === null || uid === undefined) {
            throw new Error('Required parameter uid was null or undefined when calling updateVoucherByUid.');
        }
        if (store_id === null || store_id === undefined) {
            throw new Error('Required parameter store_id was null or undefined when calling updateVoucherByUid.');
        }
        if (name === null || name === undefined) {
            throw new Error('Required parameter name was null or undefined when calling updateVoucherByUid.');
        }
        if (unlimited === null || unlimited === undefined) {
            throw new Error('Required parameter unlimited was null or undefined when calling updateVoucherByUid.');
        }
        if (discbyprice === null || discbyprice === undefined) {
            throw new Error('Required parameter discbyprice was null or undefined when calling updateVoucherByUid.');
        }

        let queryParameters = new HttpParams({encoder: this.encoder});
        if (store_id !== undefined && store_id !== null) {
            queryParameters = queryParameters.set('store_id', <any>store_id);
        }
        if (name !== undefined && name !== null) {
            queryParameters = queryParameters.set('name', <any>name);
        }
        if (desc !== undefined && desc !== null) {
            queryParameters = queryParameters.set('desc', <any>desc);
        }
        if (unlimited !== undefined && unlimited !== null) {
            queryParameters = queryParameters.set('unlimited', <any>unlimited);
        }
        if (qty !== undefined && qty !== null) {
            queryParameters = queryParameters.set('qty', <any>qty);
        }
        if (discbyprice !== undefined && discbyprice !== null) {
            queryParameters = queryParameters.set('discbyprice', <any>discbyprice);
        }
        if (disc !== undefined && disc !== null) {
            queryParameters = queryParameters.set('disc', <any>disc);
        }
        if (discpctg !== undefined && discpctg !== null) {
            queryParameters = queryParameters.set('discpctg', <any>discpctg);
        }
        if (minpurchase !== undefined && minpurchase !== null) {
            queryParameters = queryParameters.set('minpurchase', <any>minpurchase);
        }
        if (minqty !== undefined && minqty !== null) {
            queryParameters = queryParameters.set('minqty', <any>minqty);
        }
        if (minvariety !== undefined && minvariety !== null) {
            queryParameters = queryParameters.set('minvariety', <any>minvariety);
        }
        if (startdate !== undefined && startdate !== null) {
            queryParameters = queryParameters.set('startdate', <any>startdate);
        }
        if (enddate !== undefined && enddate !== null) {
            queryParameters = queryParameters.set('enddate', <any>enddate);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        const httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected !== undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }


        return this.httpClient.put<any>(`${this.configuration.basePath}/api/voucher/${encodeURIComponent(String(uid))}`,
            null,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
